generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id         Int      @id @default(autoincrement())
  title      String
  summary    String
  category   String
  tags       String
  content    String
  image      String
  alt_image  String
  created_at DateTime @default(now())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String
  district      String?
  address       String?
  role          Role          @default(USER)
  nik           String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  gender        String?
  Article       Article[]
  Child         Child[]
  Measurement   Measurement[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Child {
  id                Int            @id @default(autoincrement())
  name              String
  birthDate         DateTime
  gender            String
  bloodType         String
  height            Float
  headCircumference Float
  weight            Float
  armCircumference  Float
  allergy           String
  premature         String
  motherHeight      Float
  fatherHeight      Float
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userId            String
  User              User           @relation(fields: [userId], references: [id])
  measurements      Measurement[]
  NutritionLog      NutritionLog[]
}

model Measurement {
  id                Int      @id @default(autoincrement())
  height            Float
  weight            Float
  headCircumference Float
  armCircumference  Float
  date              DateTime
  nutritionalStatus String
  childId           Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId String
  User   User   @relation(fields: [userId], references: [id])
  Child  Child  @relation(fields: [childId], references: [id])
}

model NutritionLog {
  id                 Int                 @id @default(autoincrement())
  childId            Int
  Child              Child               @relation(fields: [childId], references: [id])
  ageGroup           AgeGroup
  breastfeedingFreq  Int?
  breastfeedingTimes BreastfeedingTime[]
  mealNutrition      MealNutrition[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model BreastfeedingTime {
  id             Int          @id @default(autoincrement())
  nutritionLogId Int
  NutritionLog   NutritionLog @relation(fields: [nutritionLogId], references: [id])
  time           String
}

model MealNutrition {
  id             Int             @id @default(autoincrement())
  nutritionLogId Int
  NutritionLog   NutritionLog    @relation(fields: [nutritionLogId], references: [id])
  timeOfMeal     MealTime
  menuOfMeal     String
  nutritionType  NutritionType[]
}

enum AgeGroup {
  BABY // 0-6 bulan
  INFANT // 7-24 bulan
  TODDLER // 25-60 bulan
}

enum MealTime {
  BREAKFAST
  LUNCH
  SNACK
  DINNER
}

enum NutritionType {
  CARBOHYDRATE
  ANIMAL_PROTEIN
  PLANT_PROTEIN
  GOOD_FATS
  VITAMIN
  MINERAL
}

enum Role {
  USER
  KADER
  KEPALA_KADER
}
